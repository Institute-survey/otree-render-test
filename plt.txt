import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import re
from glob import glob
import traceback

# --- 設定 --- #
input_dir = ".."  # CSVファイルのあるディレクトリ（スクリプトの1つ上）
output_dir = "."  # 出力先（スクリプトと同じフォルダ）
dpi = 300         # 解像度
draw_grid = True  # 罫線表示（Falseにすると枠なし）

# --- 軸定義 --- #
benefits = [1, 2, 3, 4, 5]
probabilities = [round(x * 0.1, 1) for x in range(11)]
public_errors = ["0", "0.001", "0.002", "0.003", "0.004", "0.005", "0.1"]
error_levels = [("0", "0"), ("0.001", "0.001")]

# --- データ格納用 --- #
data = {}

# --- ファイル名パターンマッチ用正規表現 --- #
pattern = re.compile(
    r"cooperation_rates_400_([A-Z]{4})_probability([0-9.]+)_action_error([0-9.]+)"
    r"_evaluate_error([0-9.]+)_public_error([0-9.]+)_benefit([1-5])\.csv"
)

# --- ファイル読み込みとデータ抽出 --- #
csv_files = glob(os.path.join(input_dir, "cooperation_rates_400_*.csv"))

for file in csv_files:
    try:
        filename = os.path.basename(file)
        match = pattern.match(filename)
        if not match:
            continue

        norm, prob, aerr, eerr, perr, benefit = match.groups()
        prob = float(prob)
        benefit = int(benefit)

        df = pd.read_csv(file)
        if "Sim0" not in df.columns or "Generation" not in df.columns:
            continue

        subset = df[(df["Generation"] >= 902) & (df["Generation"] <= 1001)]
        if subset.empty:
            continue

        mean_coop = subset["Sim0"].mean()

        key = (aerr, eerr)
        data.setdefault(norm, {}).setdefault(key, {}).setdefault(perr, {}).setdefault(benefit, {})[prob] = mean_coop

    except Exception as e:
        print(f"[ERROR] Skipping file: {file}")
        traceback.print_exc()

# --- ヒートマップ描画関数 --- #
def plot_heatmaps_for_norm(norm):
    fig, axes = plt.subplots(nrows=2, ncols=6, figsize=(24, 8), dpi=dpi)
    plt.subplots_adjust(wspace=0.4, hspace=0.4)
    fig.suptitle(f"Cooperation Rate Heatmaps – Norm: {norm}", fontsize=18)

    for i, (aerr, eerr) in enumerate(error_levels):
        for j, perr in enumerate(public_errors):
            if j >= 6 and i == 0:
                # 最後の列 (0.1) は下段のみに表示（12個で調整）
                axes[i][j].axis('off')
                continue

            ax = axes[i][j]
            grid = np.full((5, 11), np.nan)  # 5x11: benefit×probability

            for bi, benefit in enumerate(benefits):
                for pi, prob in enumerate(probabilities):
                    val = data.get(norm, {}).get((aerr, eerr), {}).get(perr, {}).get(benefit, {}).get(prob, np.nan)
                    grid[5 - benefit][pi] = val  # 上から benefit=5 → 1

            sns.heatmap(
                grid, ax=ax, cmap="Blues", vmin=0, vmax=1,
                xticklabels=probabilities,
                yticklabels=list(reversed(benefits)),
                cbar=False,
                linewidths=0.5 if draw_grid else 0,
                linecolor='gray' if draw_grid else None
            )
            ax.set_title(f"pub_err={perr}\na/e_err={aerr}", fontsize=9)
            ax.set_xlabel("probability")
            ax.set_ylabel("benefit")

    output_path = os.path.join(output_dir, f"cooperation_heatmap_{norm}.png")
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.savefig(output_path)
    plt.close()
    print(f"Saved heatmap: {output_path}")

# --- 実行：public_norm ごとに描画 --- #
for norm in sorted(data.keys()):
    plot_heatmaps_for_norm(norm)
